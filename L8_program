import numpy as np                                  # for array handling
import pysicktim as lidar                           # required for communication with TiM561 lidar sensor
import time
import threading # only used for threading functions
import math
import csv
import RPi.GPIO as GPIO

import L1_log
import L1_lidar
import L1_motor as motor
import L2_vector

#for mapping
from lidar_driving import SCUTTLE as map

GPIO.setup(25,GPIO.IN,pull_up_down=GPIO.PUD_DOWN) # set GPIO pin 22 as input with pull-up resistor

def detect(ticks):#look for metals, return true when found.
    voltage_level = read_stable_gpio(25)#GPIO.input(25)
    if voltage_level is not None:
        print(f"Stable voltage level: {voltage_level}")
        if voltage_level == GPIO.HIGH:
            print("Metal detected!")
            motor.sendLeft(0.0)
            motor.sendRight(0.0)
            marker()
            time.sleep(2)
            print(f"Metal at ({x,y})")
            motor.sendLeft(0.4)
            motor.sendRight(0.4)
            time.sleep(2)
            print(f"Distance: {dist}m    Angle: {angle}deg  Coordinates: {x,y}")
            ticks+=1
        else:
            ticks=0
    return ticks
 
def read_stable_gpio(pin, debounce_time=0.025):
    stable_value = GPIO.input(pin)
    time.sleep(debounce_time)
    if GPIO.input(pin) == stable_value:
        return stable_value
    return None

def marker():#capture coordinates and log location of metals on nodeRed
    #log coordinates to txt
    L1_log.tmpFile(x, "x.txt")
    L1_log.tmpFile(y, "y.txt")
    print(f"Metal found! x: {x}, y: {y}")
    
if __name__ == "__main__":
    ticks = 0
    rturn = True
    turns=0
    while True:
        # CALLS THE CONTROL SYSTEM TO ACTION
        dataset = L2_vector.getNearest()
        dist = dataset[0]
        angle = dataset[1]
        coord = L2_vector.polar2cart(dist, angle)
        x = coord[0]
        y = coord[1]
        print(dist,angle,x,y)
        ticks=detect(ticks)
        motor.sendLeft(0.4)
        motor.sendRight(0.4)
        if (dist<=0.55 and -30.0<=angle<=30.0):
            if rturn:
                print("Turn right!")
                motor.sendLeft(0.5)
                motor.sendRight(-0.5)
                time.sleep(2)
                motor.sendLeft(0.5)
                motor.sendRight(0.5)
                time.sleep(4)
                motor.sendLeft(0.5)
                motor.sendRight(-0.4)
                time.sleep(2)
                rturn = False
            else:
                print("Turn left!")
                motor.sendLeft(-0.5)
                motor.sendRight(0.5)
                time.sleep(2)
                motor.sendLeft(0.5)
                motor.sendRight(0.5)
                time.sleep(4)
                motor.sendLeft(-0.5)
                motor.sendRight(0.5)
                time.sleep(2)
                rturn = True
            turns+=1
            
        else:
            detect(ticks)
            if ticks >= 1: # if the voltage level is stable for 3 iterations
                ticks=0
            else:
                motor.sendLeft(0.4)
                motor.sendRight(0.4)
            
